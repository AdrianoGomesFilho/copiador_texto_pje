OLHAR CHATGPT

It looks like you're embedding a PDF document in a website using the PDF.js viewer, which is a common way to display PDF files in HTML. From the issue you're describing, it seems that you can only copy text from one page at a time, rather than from multiple pages or the entire document. This might be due to how the PDF is being rendered and how the text layer is structured.

Here are a few things you can check or try to solve the issue:

1. Check the Text Layer Rendering
The textLayer in your code is responsible for overlaying text on top of the PDF's canvas (which displays the actual pages). It appears that the text is rendered as individual span elements within the textLayer. However, these span elements may only be visible on the current page you're viewing, making it difficult to select and copy text across multiple pages.

Solution: Ensure that the text layer for all pages is being properly loaded and rendered. You may need to modify the viewer's settings to make sure the text for each page is available for copying when navigating to different pages. Check if the textLayer is dynamically updated for each page in the viewer.
2. Enable Text Selection Across Pages
Sometimes the issue can be with how the PDF viewer is set up. PDF.js allows for easy copying of text if it’s properly set up, but text selection may be disabled across pages by default.

Solution: You may need to adjust the PDF.js configuration to allow text selection across pages or even from multiple pages. This can be done by enabling the textLayer's ability to select across multiple pages. You can check the PDF.js documentation for details on how to enable full-page text selection.
3. JavaScript Solution to Enable Copying Multiple Pages
If you're using the PDF.js viewer and the text is segmented in span elements, one way to get text from multiple pages is to ensure that you can select text from the entire document, rather than just one page. You could try adding a script that enables copying text from multiple pages.

For example, you can add a function that collects the text from the textLayer across all pages. This function could loop through each page and extract the text, then combine them into one single copyable text block.

javascript
Copiar código
function getTextFromAllPages() {
    let fullText = '';
    const pages = document.querySelectorAll('.page');
    
    pages.forEach((page) => {
        const pageTextLayer = page.querySelector('.textLayer');
        const spans = pageTextLayer.querySelectorAll('span');
        spans.forEach(span => {
            fullText += span.textContent + ' ';
        });
    });
    
    return fullText;
}

// Example usage:
const text = getTextFromAllPages();
console.log(text);  // Display the text of all pages in the console
This way, you can programmatically collect text from all pages and present it in a single block, which could then be copied by the user.

4. Check for Restrictions on Text Copying
Some PDFs are embedded with restrictions that prevent copying or extracting content. These restrictions are typically set by the document's creator.

Solution: You may want to check the PDF's metadata to ensure no restrictions are placed on copying. If restrictions are applied, there’s not much that can be done on the front end unless the document owner adjusts the settings.
5. Use a Full PDF Viewer
If you're using a simple embedding method and still encountering limitations, you might want to try a more full-featured PDF viewer like PDF.js with enhanced capabilities or other third-party tools. These may provide a more robust experience for text copying and navigation.

